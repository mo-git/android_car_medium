package com.zhidian.app.sdk.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhidian.app.sdk.db.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "user".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, long.class, "userId", false, "USER_ID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property SchoolName = new Property(5, String.class, "schoolName", false, "SCHOOL_NAME");
        public final static Property SpecialtyName = new Property(6, String.class, "specialtyName", false, "SPECIALTY_NAME");
        public final static Property RegisterTime = new Property(7, Long.class, "registerTime", false, "REGISTER_TIME");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL UNIQUE ," + // 1: userId
                "\"USERNAME\" TEXT NOT NULL ," + // 2: username
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"MOBILE\" TEXT," + // 4: mobile
                "\"SCHOOL_NAME\" TEXT," + // 5: schoolName
                "\"SPECIALTY_NAME\" TEXT," + // 6: specialtyName
                "\"REGISTER_TIME\" INTEGER);"); // 7: registerTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
        stmt.bindString(3, entity.getUsername());
        stmt.bindLong(4, entity.getType());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(6, schoolName);
        }
 
        String specialtyName = entity.getSpecialtyName();
        if (specialtyName != null) {
            stmt.bindString(7, specialtyName);
        }
 
        Long registerTime = entity.getRegisterTime();
        if (registerTime != null) {
            stmt.bindLong(8, registerTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // userId
            cursor.getString(offset + 2), // username
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // schoolName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // specialtyName
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // registerTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getLong(offset + 1));
        entity.setUsername(cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSchoolName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpecialtyName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRegisterTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
